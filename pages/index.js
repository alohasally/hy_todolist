import { data } from "autoprefixer";
import Head from "next/head";
import { useMemo, useEffect, useState } from "react";
import TodoItem from "../components/TodoItem";
import AddTodoContainer from "../components/AddTodoContainer";

const url = "http://localhost:3001/api/todo";

const Home = ({ props }) => {
  const [todoData, setTodoData] = useState([]);
  const [todoItem, setTodoItem] = useState("");
  const [todoDelete, setTodoDelete] = useState(false);

  //

  // useEffect(() => {
  //   let todoItemsArr = JSON.parse(localStorage.getItem("todoItems"));
  //   console.log(JSON.parse(localStorage.getItem("todoItems")));
  // }, []);

  useEffect(() => {
    const todos = JSON.parse(localStorage.getItem("todoItems"));
    if (todos) {
      setTodoData(todos);
    }
  }, []);

  const handleClickComplete = (id) => () => {
    setTodoData(
      todoData.map((data) =>
        data.id === id ? { ...data, done: !data.done } : data
      )
    );
    localStorage.setItem("todoItems", JSON.stringify([...todoData]));
  };

  const handleImportant = (id) => () => {
    setTodoData(
      todoData.map((data) =>
        data.id === id ? { ...data, isImportant: !data.isImportant } : data
      )
    );
    localStorage.setItem("todoItems", JSON.stringify([...todoData]));
  };

  // const handleChangeTodo = (id, newTodo) => {
  //   //수정 input value 값이 todaData.todo에 입력
  //   setTodoData(
  //     todoData.map((data) => {
  //       if (data.id === id) {
  //         data.todo = newTodo;
  //       }
  //       return data;
  //     })
  //   );
  // };

  const handleChange = (id) => (e) => {
    const { value: newTodo } = e.target;
    setTodoItem(newTodo);
    localStorage.setItem("todoItems", JSON.stringify([...todoData]));
    setTodoData(
      todoData.map((data) => {
        if (data.id === id) {
          data.todo = newTodo;
        }
        return data;
      })
    );
  };

  const handleDelete = (e) => {
    e.preventDefault();
    setTodoDelete(!todoDelete);
  };

  const handleDeleteItem = (id) => () => {
    localStorage.setItem("todoItems", JSON.stringify([...todoData]));
    setTodoData(todoData.filter((data) => data.id !== id));
  };

  // const handleUpdateTodo = (e) => () => {
  //   setTodoData([
  //     ...todoData,
  //     {
  //       id: Date.now,
  //       todo: newTodo,
  //       done: false,
  //       isImportant: false,
  //     },
  //   ]);
  //   return data;
  // };
  // console.log(setTodoData);

  return (
    <div className="h-screen flex flex-col bg-[#241722]">
      <Head>
        <title>Hy To do list</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav className="h-12 text-white">
        <div className="flex px-4 py-4  ">
          <a>
            <svg
              class="w-6 h-6"
              fill="currentColor"
              viewBox="0 0 20 20"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fill-rule="evenodd"
                d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                clip-rule="evenodd"
              ></path>
            </svg>
          </a>
          <h1 className="mx-auto">
            <a href="https://nextjs.org">wha, todo?</a>
          </h1>
        </div>
      </nav>

      <span className="border-b-2 border-white border-opacity-10 "></span>

      <div className="px-4 py-4 flex justify-between">
        <div className="space-x-4">
          <span className="text-white">All</span>
          <span className="text-white text-opacity-60">todo</span>
          <span className="text-white text-opacity-60">done</span>
        </div>
        <div onClick={handleDelete}>
          <a className="text-white text-opacity-60">
            <svg
              class="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
              ></path>
            </svg>
          </a>
        </div>
      </div>
      <div className="mx-4">
        <AddTodoContainer todoData={todoData} setTodoData={setTodoData} />
      </div>

      <div className=" px-4 py-8 ">
        <h2 className="text-xl font-semibold text-white mb-8">Todo</h2>

        {todoData.map((data) => (
          <TodoItem
            data={data}
            todoItem={todoItem}
            handleClickComplete={handleClickComplete}
            handleImportant={handleImportant}
            handleChange={handleChange}
            todoDelete={todoDelete}
            handleDeleteItem={handleDeleteItem}
          />
        ))}
      </div>
    </div>
  );
};

export default Home;
